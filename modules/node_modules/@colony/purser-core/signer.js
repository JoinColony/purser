/* @flow */

import { Signer } from 'ethers';

import {
  DESCRIPTORS,
} from './defaults';

import type {
  WalletArgumentsType,
  TransactionResponseType,
} from './flowtypes';

const { GENERIC_PROPS } = DESCRIPTORS;

export default class PurserSigner extends Signer {
  constructor(purserWalletInstance: WalletArgumentsType, provider: {}) {
    if (!provider) {
      /*
       * @TODO Better message copy
       */
      throw new Error('No provider set');
    }
    super();
    Object.defineProperties(this, {
      provider: {
        value: provider,
        ...GENERIC_PROPS,
      },
      getAddress: {
        value: async (): Promise<string> => purserWalletInstance.address,
        ...GENERIC_PROPS,
      },
      signMessage: {
        value: async (message: string): Promise<string> =>
          purserWalletInstance.signMessage({ message }),
        ...GENERIC_PROPS,
      },
      sendTransaction: {
        value:
          async (signedTransaction: string): Promise<TransactionResponseType> =>
            provider.sendTransaction(signedTransaction),
        ...GENERIC_PROPS,
      }
    });
  }
}
