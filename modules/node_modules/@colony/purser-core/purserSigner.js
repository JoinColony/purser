/* @flow */

import { Signer } from 'ethers';

import { userInputValidator } from './helpers';

import { DESCRIPTORS, REQUIRED_PROPS } from './defaults';

import type {
  PurserSignerConstructorArguments,
  TransactionResponseType,
} from './flowtypes';

const { GENERIC_PROPS } = DESCRIPTORS;

/**
 * Create a new instance of an Abstract Signer
 *
 * A signer is required by design to have the following props: `provider`,
 * `getAddress`, `signMessage` and `sendTransaction`
 *
 * See more: https://docs.ethers.io/ethers.js/html/api-wallet.html#signer-api
 *
 * @class PurserSigner
 *
 * @extends Signer
 *
 * @param {Object} purserWalletInstance A purser instantiated wallet
 * @param {Object} provider A provieder, most likely instantiated from Etherscan
 *
 * The above parameters are sent in as props of an object.
 *
 * @return {PurserSigner} A new instance of the class containing the expected props
 */
export default class PurserSigner extends Signer {
  constructor({
    purserWalletInstance,
    provider,
  }: PurserSignerConstructorArguments) {
    userInputValidator({
      firstArgument: { purserWalletInstance, provider },
      requiredAll: REQUIRED_PROPS.SIGNER_CONSTRUCTOR,
    });
    super();
    Object.defineProperties(this, {
      provider: {
        value: provider,
        ...GENERIC_PROPS,
      },
      getAddress: {
        value: async (): Promise<string> => purserWalletInstance.address,
        ...GENERIC_PROPS,
      },
      signMessage: {
        value: async (message: string): Promise<string> =>
          purserWalletInstance.signMessage({ message }),
        ...GENERIC_PROPS,
      },
      sendTransaction: {
        value:
          async (signedTransaction: string): Promise<TransactionResponseType> =>
            provider.sendTransaction(signedTransaction),
        ...GENERIC_PROPS,
      }
    });
  }
}

